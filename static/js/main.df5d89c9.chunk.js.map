{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/a1-bll/selectors.ts","utils/error-utils.ts","features/f1-login/l1-bll/auth-reducer.tsx","features/f3-App/app-reducer.ts","features/f3-App/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/f1-login/l1-bll/selectors.tsx","utils/redux-utils.ts","features/f1-login/l1-ui/Login.tsx","features/f1-login/l1-bll/index.tsx","features/f2-TodolistsList/todolists-reducer.ts","features/f2-TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/f2-TodolistsList/Todolist/Task/Task.tsx","features/f2-TodolistsList/Todolist/Todolist.tsx","features/f2-TodolistsList/TodolistsList.tsx","features/f2-TodolistsList/index.tsx","app/a1-ui/App.tsx","app/a1-bll/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","selectStatus","state","app","status","selectIsInitialized","isInitialized","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","handleServerAppError","dispatch","showError","appActions","setAppErrorAC","error","messages","length","setAppStatusAC","handleServerNetworkError","message","handleAsyncServerNetworkError","rejectWithValue","errors","fieldsErrors","undefined","handleAsyncServerAppError","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","action","payload","extraReducers","builder","addCase","fulfilled","actions","initializeApp","appReducer","reducer","Alert","props","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectIsLoggedIn","auth","useAppDispatch","useActions","useMemo","bindActionCreators","Login","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","handleSubmit","Grid","container","justify","item","xs","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","style","color","type","FormControlLabel","control","Checkbox","Button","authReducer","fetchTodolists","todolists","removeTodolist","changeTodolistEntityStatus","addTodolist","todolist","changeTodolistTitle","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","thunkAPI","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodoListsActions","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","marginLeft","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","taskActions","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","key","className","position","top","right","Delete","fontSize","Todolist","demo","todoListsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitleCallback","tasksForTodolist","renderFilterButton","buttonFilter","text","Paper","padding","size","paddingTop","TodolistsList","addTodolistCallback","spacing","flexWrap","overflowX","allTodolistTasks","width","tasksReducer","taskSlice","todolistsReducer","todolistSlice","todoListsAsyncActions","tasksAsyncActions","App","appSelectors","logOutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.df5d89c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '78abceff-cb7c-4815-8b56-016c67d0625d'\r\n    }\r\n};\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n});\r\n\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('auth/login', data);\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me');\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId: number }>>('auth/login');\r\n    }\r\n};\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        debugger\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n};\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = {\r\n    field: string,\r\n    error: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {AppRootStateType} from './store';\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized;\r\n","import {ResponseType} from '../api/todolists-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AxiosError} from 'axios';\r\nimport {appActions} from '../features/f3-App';\r\nimport {SetAppErrorActionType, SetAppStatusActionType} from '../features/f3-App/app-reducer';\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>, showError = true) => {\r\n\r\n    if (showError) {\r\n        dispatch(appActions.setAppErrorAC({error: data.messages.length ? data.messages[0] : 'Some error occurred'}));\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}));\r\n};\r\nexport const handleServerNetworkError = (error: AxiosError, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>, showError = true) => {\r\n    if (showError) {\r\n        dispatch(appActions.setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}));\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}));\r\n\r\n};\r\nexport const handleAsyncServerNetworkError = (error: AxiosError, dispatch: any,\r\n                                              rejectWithValue: any, showError = true) => {\r\n    if (showError) {\r\n        dispatch(appActions.setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}));\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}));\r\n    return rejectWithValue({errors: [error.message], fieldsErrors: undefined});\r\n\r\n};\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>, dispatch: any,\r\n                                             rejectWithValue: any, showError = true) => {\r\n\r\n    if (showError) {\r\n        dispatch(appActions.setAppErrorAC({error: data.messages.length ? data.messages[0] : 'Some error occurred'}));\r\n    }\r\n    dispatch(appActions.setAppStatusAC({status: 'failed'}));\r\n    return rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors});\r\n};\r\n","import {authAPI, LoginParamsType} from '../../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {ThunkErrorType} from '../../../app/a1-bll/store';\r\nimport {appActions} from '../../f3-App';\r\n\r\n\r\nconst login = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: ThunkErrorType\r\n}>('auth/login', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n    try {\r\n        const res = await authAPI.login(param);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n            return;\r\n\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors});\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err;\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined});\r\n    }\r\n\r\n});\r\nconst logout = createAsyncThunk('auth/logout', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}));                                         // Сделал деструктуризацию thunkAPI\r\n    const res = await authAPI.logout();\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({});\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue({});\r\n    }\r\n\r\n});\r\n\r\n\r\nexport const asyncActions = {\r\n    logout,\r\n    login\r\n};\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true;\r\n        });\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false;\r\n        });\r\n    }\r\n});\r\n\r\n\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n\r\n","import {authAPI} from '../../api/todolists-api';\r\nimport {handleServerAppError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {setIsLoggedInAC} from '../../features/f1-login/l1-bll/auth-reducer';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n};\r\n\r\nconst initializeApp = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me();\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n    } else {\r\n        handleServerAppError(res.data, dispatch);\r\n    }\r\n    //возвращает в любом случае undefined return можно не писать\r\n});\r\nexport const asyncActions = {\r\n    initializeApp\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error;\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true;\r\n        });\r\n    }\r\n});\r\nconst {setAppErrorAC, setAppStatusAC} = slice.actions;\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null,\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import * as appSelectors from './../../app/a1-bll/selectors';\r\nimport {slice} from './app-reducer';\r\n\r\nconst appReducer = slice.reducer;\r\nconst appActions = slice.actions;\r\n\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n};\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/a1-bll/store'\r\nimport {appActions} from '../../features/f3-App';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(appActions.setAppErrorAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../../app/a1-bll/store';\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n","import {useDispatch} from 'react-redux';\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux';\r\nimport {useMemo} from 'react';\r\nimport {AppDispatchType} from '../app/a1-bll/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch();\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch);\r\n    }, []);\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport {useSelector} from 'react-redux';\r\nimport {FormikHelpers, useFormik} from 'formik';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {authActions, authSelectors} from '../l1-bll';\r\nimport {useAppDispatch} from '../../../utils/redux-utils';\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormikValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n\r\n\r\n    const formik = useFormik({\r\n\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Must be more than 2 characters';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n            if (authActions.login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n    });\r\n\r\n\r\n    if (isLoggedIn) {\r\n\r\n        return <Redirect to={'/'}/>;\r\n    }\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Grid container justify=\"center\">\r\n            <Grid item xs={4}>\r\n\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox  {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n\r\n            </Grid>\r\n        </Grid>;\r\n    </form>;\r\n};\r\n","import * as authSelectors from './selectors';\r\nimport {Login} from '../l1-ui/Login';\r\nimport {asyncActions, slice} from './auth-reducer';\r\n\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions,\r\n\r\n};\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n};\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {\r\n    handleAsyncServerAppError,\r\n    handleAsyncServerNetworkError,\r\n    handleServerAppError,\r\n    handleServerNetworkError\r\n} from '../../utils/error-utils';\r\nimport {ThunkErrorType} from '../../app/a1-bll/store';\r\nimport {appActions} from '../f3-App';\r\nimport {RequestStatusType} from '../f3-App/app-reducer';\r\n\r\n\r\nconst fetchTodolists = createAsyncThunk('todolists/fetchTodoLists', async (param, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n    const res = await todolistsAPI.getTodolists();\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n        return {todolists: res.data};\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\n\r\n\r\nconst removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}));\r\n    const res = await todolistsAPI.deleteTodolist(todolistId);\r\n    try {\r\n        dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n        return {id: todolistId};\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\n\r\n\r\nconst addTodolist = createAsyncThunk<{ todolist: TodolistType }, string,\r\n        { rejectValue: ThunkErrorType }>\r\n    ('todolists/addTodolist', async (title, {\r\n            dispatch,\r\n            rejectWithValue\r\n        }) => {\r\n            dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n\r\n            try {\r\n                debugger\r\n                const res = await todolistsAPI.createTodolist(title);\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n                    return {todolist: res.data.data.item};\r\n                } else {\r\n                    return handleAsyncServerAppError(res.data, dispatch,\r\n                        rejectWithValue, true);\r\n                }\r\n            } catch (err) {\r\n                return handleAsyncServerNetworkError(err, dispatch,\r\n                    rejectWithValue, false);\r\n            }\r\n        }\r\n    )\r\n;\r\nconst changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title);\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n            return {id: param.id, title: param.title};\r\n        } else {\r\n            handleServerAppError(res.data, dispatch, false);\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors});\r\n        }\r\n    } catch (err) {\r\n        return handleAsyncServerNetworkError(err, dispatch,\r\n            rejectWithValue, false);\r\n    }\r\n});\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistTitle\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'});\r\n        });\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        });\r\n    },\r\n});\r\n\r\n\r\nconst {changeTodolistEntityStatus} = slice.actions;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {handleAsyncServerNetworkError, handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {AppRootStateType, ThunkErrorType} from '../../app/a1-bll/store';\r\nimport {asyncActions as asyncTodoListsActions} from './todolists-reducer';\r\nimport {appActions} from '../f3-App';\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\n\r\nconst fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n    const res = await todolistsAPI.getTasks(todolistId);\r\n\r\n    const tasks = res.data.items;\r\n    thunkAPI.dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n    return {tasks, todolistId};\r\n\r\n});\r\nconst removeTask = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId);\r\n    thunkAPI.dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n    return {taskId: param.taskId, todolistId: param.todolistId};\r\n\r\n});\r\nconst addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, {\r\n    rejectValue: ThunkErrorType\r\n}>('tasks/addTask', async (param,\r\n                           {dispatch, rejectWithValue}\r\n) => {\r\n    dispatch(appActions.setAppStatusAC({status: 'loading'}));\r\n\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title);\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(appActions.setAppStatusAC({status: 'succeeded'}));\r\n            return res.data.data.item;\r\n        } else {\r\n            handleServerAppError(res.data, dispatch, false);\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors});\r\n        }\r\n    } catch (err) {\r\n        return handleAsyncServerNetworkError(err, dispatch, rejectWithValue, false);\r\n    }\r\n\r\n});\r\nconst updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue,\r\n    getState\r\n}) => {\r\n    const state = getState() as AppRootStateType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId);\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        // console.warn('task not found in the state');\r\n        return rejectWithValue('task not found in the state');\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    };\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel);\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n\r\n            return param;\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue(null);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        return rejectWithValue(null);\r\n    }\r\n});\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n};\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(asyncTodoListsActions.removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase(asyncTodoListsActions.fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = [];\r\n            });\r\n        });\r\n        builder.addCase(asyncTodoListsActions.addTodolist.fulfilled, (state, action) => {\r\n\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks;\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload);\r\n        });\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model};\r\n            }\r\n        });\r\n    }\r\n});\r\nconst tasksReducer = slice.reducer;\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n\r\n\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport  type AddItemFormSubmitHelperType = {\r\n    setError: (error: string) => void\r\n    setTitle: (title: string) => void\r\n}\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title, {setError, setTitle});\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    };\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>;\r\n});\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api';\r\nimport {taskActions} from '../../index';\r\nimport {useActions} from '../../../../utils/redux-utils';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    // changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    // changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    // removeTask: (params: { taskId: string, todolistId: string }) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask,} = useActions(taskActions);\r\n    const onClickHandler = useCallback(() => removeTask({\r\n        taskId: props.task.id,\r\n        todolistId: props.todolistId\r\n    }), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        });\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({taskId: props.task.id, model: {title: newValue}, todolistId: props.todolistId});\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} style={{position: 'absolute', top: '2px', right: '2px'}}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>;\r\n});\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api';\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer';\r\nimport {taskActions, todoListsActions} from '../index';\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils';\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n        const {changeTodolistFilter, removeTodolist, changeTodolistTitle} = useActions(todoListsActions);\r\n        const {fetchTasks} = useActions(taskActions);\r\n        const dispatch = useAppDispatch();\r\n\r\n        useEffect(() => {\r\n            if (demo) {\r\n                return;\r\n            }\r\n            fetchTasks(props.todolist.id);\r\n        }, []);\r\n\r\n        const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n            let thunk = taskActions.addTask({title: title, todolistId: props.todolist.id});\r\n            const resultAction = await dispatch(thunk);\r\n            if (taskActions.addTask.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.errors?.length) {\r\n                    const errorMessage = resultAction.payload?.errors[0];\r\n                    helper.setError(errorMessage);\r\n                } else {\r\n                    helper.setError('Some error occurred');\r\n                }\r\n            } else {\r\n                helper.setTitle('');\r\n            }\r\n        }, [props.todolist.id]);\r\n\r\n        const removeTodolistCallback = () => {\r\n            removeTodolist(props.todolist.id);\r\n        };\r\n\r\n        const changeTodolistTitleCallback = useCallback((title: string) => {\r\n            changeTodolistTitle({id: props.todolist.id, title: title});\r\n        }, [props.todolist.id]);\r\n\r\n\r\n        const onClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n            filter: filter,\r\n            id: props.todolist.id\r\n        }), [props.todolist.id]);\r\n\r\n\r\n        let tasksForTodolist = props.tasks;\r\n\r\n        if (props.todolist.filter === 'active') {\r\n            tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n        }\r\n        if (props.todolist.filter === 'completed') {\r\n            tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n        }\r\n\r\n\r\n        const renderFilterButton = (color: PropTypes.Color, buttonFilter: FilterValuesType, text: string) => {\r\n            return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                           onClick={() => onClickHandler(buttonFilter)}\r\n                           color={color}\r\n            >{text}\r\n            </Button>;\r\n        };\r\n\r\n\r\n        return <Paper style={{padding: '10px', position: 'relative'}}>\r\n\r\n            <IconButton onClick={removeTodolistCallback} disabled={props.todolist.entityStatus === 'loading'}\r\n                        style={{position: 'absolute', right: '5px', top: '5px'}}\r\n                        size={'small'}\r\n            >\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitleCallback}/>\r\n\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n\r\n                    />)\r\n                }\r\n                {!tasksForTodolist.length && <div style={{padding: '10px', color: 'gray'}}>Create your first task</div>}\r\n            </div>\r\n            <div style={{paddingTop: '10px'}}>\r\n                {renderFilterButton('default', 'all', 'ALL')}\r\n                {renderFilterButton('primary', 'active', 'ACTIVE')}\r\n                {renderFilterButton('secondary', 'completed', 'COMPLETED')}\r\n            </div>\r\n        </Paper>;\r\n    })\r\n;\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {TodolistDomainType} from './todolists-reducer';\r\nimport {TasksStateType} from './tasks-reducer';\r\nimport {Grid} from '@material-ui/core';\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from '../f1-login/l1-bll/selectors';\r\nimport {todoListsActions} from './index';\r\nimport {AppRootStateType} from '../../app/a1-bll/store';\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n    const {\r\n        fetchTodolists,\r\n    } = useActions(todoListsActions);\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todoListsActions.addTodolist(title);\r\n        const resultAction = await dispatch(thunk);\r\n        if (todoListsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0];\r\n                helper.setError(errorMessage);\r\n            } else {\r\n                helper.setError('Some error occurred');\r\n            }\r\n        } else {\r\n            helper.setTitle('');\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolists();\r\n    }, []);\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>;\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>;\r\n                })\r\n            }\r\n        </Grid>\r\n    </>;\r\n};\r\n","import {asyncActions as tasksAsyncActions, slice as taskSlice} from './tasks-reducer';\r\nimport {asyncActions as todoListsAsyncActions, slice as todolistSlice} from './todolists-reducer';\r\nimport {TodolistsList} from './TodolistsList';\r\n\r\nconst tasksReducer = taskSlice.reducer;\r\nconst todolistsReducer = todolistSlice.reducer;\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n    ...todolistSlice.actions\r\n};\r\nconst taskActions = {\r\n    ...tasksAsyncActions,\r\n    ...taskSlice.actions\r\n\r\n};\r\nexport {\r\n    taskActions,\r\n    todoListsActions,\r\n    TodolistsList, todolistsReducer, tasksReducer\r\n};\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {ErrorSnackbar} from '../../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from '../../features/f1-login/l1-bll';\r\nimport {TodolistsList} from '../../features/f2-TodolistsList';\r\nimport {appSelectors} from '../../features/f3-App';\r\nimport {asyncActions} from '../../features/f3-App/app-reducer';\r\n\r\n\r\nconst App = ({demo = false}: PropsType) => {\r\n    const status = useSelector(appSelectors.selectStatus);\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized);\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n\r\n        dispatch(asyncActions.initializeApp());\r\n    }, []);\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(authActions.logout());\r\n    }, []);\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>;\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404 ERROR</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport default App;\r\n","import {ActionCreatorsMapObject, bindActionCreators, combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport {useDispatch} from 'react-redux';\r\nimport {useMemo} from 'react';\r\nimport {FieldErrorType} from '../../api/todolists-api';\r\nimport {authReducer} from '../../features/f1-login/l1-bll';\r\nimport {tasksReducer, todolistsReducer} from '../../features/f2-TodolistsList';\r\nimport {appReducer} from '../../features/f3-App';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n});\r\n// непосредственно создаём store\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n});\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\n\r\nexport type ThunkErrorType = {\r\n    errors: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/a1-ui/App';\r\nimport {store} from './app/a1-bll/store';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}